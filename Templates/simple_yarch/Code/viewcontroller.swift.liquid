//
//  {{ module_info.description }}
//  Created by {{ developer.name }} on {{ date }}.
//

import UIKit

// MARK: - {{ module_info.name }}ViewLogic

protocol {{ module_info.name }}ViewLogic: class {
	func display(viewState: {{ module_info.name }}.State)
}

// MARK: - {{ module_info.name }}ViewController

class {{ module_info.name }}ViewController: UIViewController {

	// MARK: Private variables

	private var customView: {{ module_info.name }}View { return view as! {{ module_info.name }}View }
	private let interactor: {{ module_info.name }}BusinessLogic

	// MARK: Inits

	init(interactor: {{ module_info.name }}BusinessLogic) {
		self.interactor = interactor
		super.init(nibName: nil, bundle: nil)
	}

	required init?(coder aDecoder: NSCoder) {
			fatalError("init(coder:) has not been implemented")
	}

	// MARK: View lifecycle

	override func loadView() {
		view = {{ module_info.name }}View(frame: UIScreen.main.bounds)
	}

	override func viewDidLoad() {
		super.viewDidLoad()
		interactor.initialState()
	}
}

// MARK: - {{ module_info.name }} implementation

extension {{ module_info.name }}ViewController: {{ module_info.name }}ViewLogic {

	func display(viewState: {{ module_info.name }}.State) {
		switch viewState {
		case .loading:
			print("loading...")
		case .stopLoading:
			print("stop loading...")
		case let .error(message):
			print("error \(message)")
		case let .result(model):
			print("result: \(model)")
		}
	}
}
